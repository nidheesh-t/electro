<script type="text/javascript">
        var gk_isXlsx = false;
        var gk_xlsxFileLookup = {};
        var gk_fileData = {};
        function filledCell(cell) {
          return cell !== '' && cell != null;
        }
        function loadFileData(filename) {
        if (gk_isXlsx && gk_xlsxFileLookup[filename]) {
            try {
                var workbook = XLSX.read(gk_fileData[filename], { type: 'base64' });
                var firstSheetName = workbook.SheetNames[0];
                var worksheet = workbook.Sheets[firstSheetName];

                // Convert sheet to JSON to filter blank rows
                var jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1, blankrows: false, defval: '' });
                // Filter out blank rows (rows where all cells are empty, null, or undefined)
                var filteredData = jsonData.filter(row => row.some(filledCell));

                // Heuristic to find the header row by ignoring rows with fewer filled cells than the next row
                var headerRowIndex = filteredData.findIndex((row, index) =>
                  row.filter(filledCell).length >= filteredData[index + 1]?.filter(filledCell).length
                );
                // Fallback
                if (headerRowIndex === -1 || headerRowIndex > 25) {
                  headerRowIndex = 0;
                }

                // Convert filtered JSON back to CSV
                var csv = XLSX.utils.aoa_to_sheet(filteredData.slice(headerRowIndex)); // Create a new sheet from filtered array of arrays
                csv = XLSX.utils.sheet_to_csv(csv, { header: 1 });
                return csv;
            } catch (e) {
                console.error(e);
                return "";
            }
        }
        return gk_fileData[filename] || "";
        }
        </script><!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Verify Email</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            background: linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.7)), url('https://images.unsplash.com/photo-1600585154340-be6161a56a0c?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&q=80') no-repeat center center fixed;
            background-size: cover;
        }
        .verify-container {
            text-align: center;
            max-width: 400px;
            width: 90%;
            padding: 24px;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
            animation: floatIn 0.6s cubic-bezier(0.23, 1, 0.32, 1);
        }
        @keyframes floatIn {
            from { opacity: 0; transform: translateY(20px) scale(0.98); }
            to { opacity: 1; transform: translateY(0) scale(1); }
        }
        h1 {
            font-size: 28px;
            font-weight: 600;
            margin-bottom: 12px;
            color: #1c2526;
        }
        .form-label {
            font-weight: 500;
            margin-bottom: 8px;
            display: block;
            color: #1c2526;
            text-align: left;
        }
        .form-group {
            margin-bottom: 20px;
        }
        input[type="email"] {
            width: 100%;
            padding: 14px;
            font-size: 16px;
            border: 1px solid #dcdcdc;
            border-radius: 8px;
            box-sizing: border-box;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
        }
        input[type="email"]:focus {
            outline: none;
            border-color: #1877f2;
            box-shadow: 0 0 0 3px rgba(24, 119, 242, 0.2);
        }
        input.is-invalid {
            border-color: #d32f2f;
            box-shadow: 0 0 0 3px rgba(211, 47, 47, 0.3);
        }
        .error-message {
            font-size: 14px;
            color: #d32f2f;
            margin-top: 8px;
            min-height: 20px;
            display: none;
        }
        input.is-invalid + .error-message {
            display: block;
        }
        button {
            width: 100%;
            padding: 14px;
            background-color: #1877f2;
            color: #ffffff;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.2s ease;
        }
        button:hover {
            background-color: #165eab;
            transform: translateY(-1px);
        }
        button:active {
            transform: translateY(0);
        }
        @media (max-width: 480px) {
            .verify-container {
                padding: 16px;
            }
            h1 {
                font-size: 24px;
            }
        }
    </style>
</head>
<body>
    <section class="verify-container">
        <h1>Verify Email</h1>
        <form method="post" action="/change-email" onsubmit="return validateLoginForm()" id="verifyForm" novalidate>
            <label for="email" class="form-label">Enter your current email</label>
            <div class="form-group">
                <input
                    type="email"
                    id="email"
                    name="email"
                    placeholder="name@example.com"
                    required
                    autocomplete="email"
                />
                <div class="error-message" id="email-error"></div>
            </div>
            <button type="submit" id="submitBtn">Verify</button>
        </form>
    </section>
    <script>
        function validateLoginForm() {
            const emailInput = document.getElementById("email");
            const emailError = document.getElementById("email-error");
            const emailValue = emailInput.value.trim();
            const emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;

            emailInput.classList.remove("is-invalid");
            emailError.style.display = "none";
            emailError.textContent = "";

            if (emailValue === "") {
                emailError.textContent = "Please enter your email.";
                emailError.style.display = "block";
                emailInput.classList.add("is-invalid");
                return false;
            } else if (!emailPattern.test(emailValue)) {
                emailError.textContent = "Please enter a valid email address.";
                emailError.style.display = "block";
                emailInput.classList.add("is-invalid");
                return false;
            }
            return true;
        }
    </script>
</body>
</html>